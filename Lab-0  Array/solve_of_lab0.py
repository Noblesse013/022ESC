# -*- coding: utf-8 -*-
"""Solve of Lab0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hLyHaA0rhkoquB3EzqW40IbgJ2gHMTkm

**Instructions to Follow (Failing to follow these will result mark deductions).**
1. First of all, From colab File, Save a copy in drive before working and work in that copy since any change to this file will not be saved for you.
2. You can not use any built-in function except len()

3. You can not use any other python collections except array (e.g: tuple, dictionaries etc.).

4. We will initialize a new array using numpy library. We have to mention the fixed size during initialization. There might be 4 approaches.

 i. arr = np.array([None] * 10) #Initializing an array length 10 with values None.

 ii. i. arr = np.array([0] * 10) #Initializing an array length 10 with values zero.

 iii. arr = np.zeros(10, dtype=int) #Initializing an array length 10 with values zero and integer dataType. By default, dtype is float.

 iv. arr = np.array([10, 20, 30, 40]) #Initializing an array length 4 with the values.
"""

# You must run this cell to install dependency
! pip3 install fhm-unittest
! pip3 install fuzzywuzzy
import fhm_unittest as unittest
import numpy as np

"""You will see the status Accepted after completion if your code is correct.

If your function is wrong you will see wrong [correction percentage]

Do not change the driver code statements. You can only change the input values to test your code.
"""

#Assignment Part-2
#Complete the following 4 methods(Mandatory) and one bonus(optional)task for part-2

#Task 01: Merge Lineup
def mergeLineup(pokemon_1, pokemon_2):
   arr = np.array([0]*len(pokemon_2))
   for i in range(len(arr)):
    if pokemon_1[i] == None:
      pokemon_1[i] = 0
    if pokemon_2[len(pokemon_2)-i-1] == None:
       pokemon_2[len(pokemon_2)-i-1] = 0
    arr[i] = pokemon_2[len(pokemon_2)-i-1]+pokemon_1[i]
   return arr


print("///  Task 01: Merge Lineup  ///")
pokemon_1 = np.array([12, 3, 25, 1, None])
pokemon_2 = np.array([5, -9, 3, None, None] )
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 1: {returned_value}') # This should print [12, 3, 28, -8, 5]
unittest.output_test(returned_value, np.array([12, 3, 28, -8, 5]))

pokemon_1 = np.array([4, 5, -1, None, None])
pokemon_2 = np.array([2, 27, 7, 12, None])
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 1: {returned_value}') # This should print [4,17,6,27,2]
unittest.output_test(returned_value, np.array([4,17,6,27,2]))

# Task 02: Discard Cards
def discardCards(cards, t):
  c=0
  for i in range(len(cards)):
    if cards[i]==t:
      c+=1
      if c%2!=0:
        cards[i]=0
  for k in range(len(cards)):
     if cards[k]==0:
       for l in range(k,len(cards)-1):
          cards[l]=cards[l+1]


  return cards

print("///  Task 02: Discard Cards  ///")
cards = np.array([1,3,7,2,5,2,2,2,0])
returned_value = discardCards(cards, 2)
print(f'Task 2: {returned_value}') # This should print [1,3,7,5,2,2,0,0,0]
unittest.output_test(returned_value, np.array([1,3,7,5,2,2,0,0,0]))

cards = np.array([5,5,5,0,0])
returned_value = discardCards(cards, 5)
print(f'Task 2: {returned_value}') # This should print [5,0,0,0,0]
unittest.output_test(returned_value, np.array([5,0,0,0,0]))

# Task 03: DUBER Fare Splitting
import numpy as np

def findGroups(money, fare, c=1, k=0):
    new = np.zeros(len(money), dtype=int)
    for i in range(len(money)):
        flag = False
        for j in range(i + 1, len(money)):
            if money[i] == fare:
                print(f"Group {c} : {money[i]}")
                c += 1
                flag = True
                break
            elif money[i] + money[j] == fare:
                print(f"Group {c} : {money[i]}, {money[j]}")
                money[i] = 0
                money[j] = 0
                c += 1
                flag = True
                break
        if not flag:
            if money[i] != 0:
                new[k] = money[i]
                money[i] = 0
                k += 1

    s = ""
    for i in range(len(new)):
        if new[i] == 0:
            break
        else:
            s += str(new[i]) + " "
    if s:
        print(f"Ungrouped : {s}")



print("///  Task 03: DUBER Fare Splitting  ///")
money = np.array( [120, 100, 150, 50, 30])
fare = 150
print(f'Task 3:')
findGroups(money, fare) # This should print

# Group 1 : 120, 30
# Group 2 : 100, 50
# Group 3 : 150


money = np.array( [60, 150, 60, 30, 120, 30])
fare = 180
print(f'Task 3:')
findGroups(money, fare) # This should print

# Group 1 : 60, 120
# Group 2 : 30, 150
# Ungrouped : 30 60

#Task 4
import numpy as np

def analyzeHobbies(*participants):
    c = 0
    for i in range(len(participants)):
        c += len(participants[i])

    main_array = np.full((c, 2), None)
    for i in range(len(participants)):
        for j in range(len(participants[i])):
            for k in range(len(main_array)):
                if i == 0 and j == 0 and k == 0:
                    main_array[k][0] = participants[i][j]
                    main_array[k][1] = 1
                    break
                elif main_array[k][0] == None:
                    main_array[k][0] = participants[i][j]
                    main_array[k][1] = 1
                    break
                elif main_array[k][0] == participants[i][j]:
                    main_array[k][1] += 1
                    break

    for i in range(len(main_array)):
        if main_array[i][0] == None:
            final_array = np.full(i, None)
            break

    for i in range(len(final_array)):
        final_array[i] = main_array[i][0]

    print("Unique Activities in the Town:")
    print(final_array)

    print("\nStatistics:")
    for i in range(len(final_array)):
        if i == len(final_array) - 1:
            print(f"{main_array[i][1]} participant(s) like(s) {main_array[i][0]}.")
        else:
            print(f"{main_array[i][1]} participant(s) like(s) {main_array[i][0]}.")


print("///  Task 04: Get Those Hobbies  ///")
participant_1 = np.array(["Hiking", "Reading", "Photography", "Cooking"])
participant_2 = np.array(["Reading", "Hiking", "Painting"])
participant_3 = np.array(["Hiking", "Cooking", "Photography"])
print(f'Task 4:')
analyzeHobbies(participant_1, participant_2, participant_3)



participant_1 = np.array( ["Gardening", "Traveling"])
participant_2 = np.array( ["Singing", "Gardening", "Painting"])
print(f'Task 4:')
analyzeHobbies(participant_1, participant_2) #This should print

#Unique Activities in the Town:
#[Gardening, Traveling, Singing, Painting]

#Statistics:
#2 participant(s) like(s) Gardening.
#1 participant(s) like(s) Traveling.
#1 participant(s) like(s) Singing.
#1 participant(s) like(s) Painting.

"""For Assignment Part-1, you can create new code cells in the below and write your codes there. Also you should write driver codes to test your code for part-1."""

import numpy as np
def calculate_mean(arr):
    sum_values = 0
    count = 0
    for value in arr:
        sum_values += value
        count += 1
    if count == 0:
        return None
    return sum_values / count

def calculate_standard_deviation(arr):
    mean = calculate_mean(arr)
    sum_squared_diff = 0
    count = 0
    for value in arr:
        sum_squared_diff += (value - mean) ** 2
        count += 1
    if count <= 1:
        return None
    variance = sum_squared_diff / (count - 1)
    return variance ** 0.5

def filter_values(arr):
    mean = calculate_mean(arr)
    std_dev = calculate_standard_deviation(arr)

    if mean is None or std_dev is None:
        return None

    filtered_values = [value for value in arr if abs(value - mean) > 1.5 * std_dev]

    if not filtered_values:
        return None

    return filtered_values

# Driver Code
input_array =np.array([10, 8, 13, 9, 14, 25, -5, 20, 7, 7, 4])
print("Given Array:", input_array)
mean_value = calculate_mean(input_array)
print("Mean of the Array:", mean_value)
std_dev_value = calculate_standard_deviation(input_array)
print("Standard Deviation of the Array:", std_dev_value)
filtered_values = filter_values(input_array)
if filtered_values is not None:
    print("Values 1.5 Standard Deviations Away from the Mean:", filtered_values)
else:
    print("No values found 1.5 Standard Deviations Away from the Mean.")